// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========================================
// USERS & AUTHENTICATION
// ========================================

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String   // Sera hashé
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_cards         UserCard[]
  operation_attempts OperationAttempt[]
  user_credits       UserCredit[]

  @@map("users")
}

// ========================================
// CARDS SYSTEM
// ========================================

model Card {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  image        String
  category     String   // "minecraft", "dinosaure", "espace"
  base_rarity  String   // "common", "rare", "very_rare", "epic", "legendary"
  description  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  user_cards UserCard[]

  @@map("cards")
}

model UserCard {
  id             Int      @id @default(autoincrement())
  user_id        Int
  card_id        Int
  quantity       Int      @default(1)
  current_rarity String   @default("common") // La rareté actuelle après upgrades
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  card Card @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@unique([user_id, card_id])
  @@map("user_cards")
}

model UserCredit {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  credits    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_credits")
}

// ========================================
// BONUS OPERATIONS SYSTEM
// ========================================

model BonusOperation {
  id           Int      @id @default(autoincrement())
  type         String   @unique // "addition", "subtraction", "multiplication"
  reward       Int      // Nombre de cartes gagnées
  max_per_day  Int      @default(3)
  min_value    Int      // Valeur min pour génération
  max_value    Int      // Valeur max pour génération
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  attempts OperationAttempt[]

  @@map("bonus_operations")
}

model OperationAttempt {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  bonus_operation_id Int
  exercise           String   // JSON de l'exercice (a, b, result, steps)
  user_answers       String   // JSON des réponses de l'user
  success            Boolean
  cards_earned       Int      @default(0)
  created_at         DateTime @default(now())

  // Relations
  user            User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bonus_operation BonusOperation @relation(fields: [bonus_operation_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@map("operation_attempts")
}
